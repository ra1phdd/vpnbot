package handlers

import (
	"fmt"
	"github.com/google/uuid"
	"gopkg.in/telebot.v4"
	"log/slog"
	"nsvpn/internal/app/models"
	"nsvpn/internal/app/services"
	"nsvpn/pkg/logger"
	"strconv"
	"time"
)

type Base struct {
	log                  *logger.Logger
	bot                  *telebot.Bot
	clientButtons        *services.Buttons
	clientButtonsWithSub *services.Buttons
	us                   *services.Users
	ss                   *services.Subscriptions
	ph                   *Payments
}

func NewBase(log *logger.Logger, bot *telebot.Bot, clientButtons, clientButtonsWithSub *services.Buttons, us *services.Users, ss *services.Subscriptions, ph *Payments) *Base {
	return &Base{
		log:                  log,
		bot:                  bot,
		clientButtons:        clientButtons,
		clientButtonsWithSub: clientButtonsWithSub,
		us:                   us,
		ss:                   ss,
		ph:                   ph,
	}
}

func (b *Base) AcceptOfferHandler(c telebot.Context) error {
	err := b.us.UpdateIsSign(c.Sender().ID, true)
	if err != nil {
		b.log.Error("Failed to update sign", err, slog.Int64("userId", c.Sender().ID))
		return c.Send("–£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
	}

	return c.Send(fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!", c.Sender().FirstName), b.clientButtons.AddBtns())
}

func (b *Base) StartHandler(c telebot.Context) error {
	data, err := b.us.Get(c.Sender().ID)
	if err != nil {
		b.log.Error("Failed to fetch user", err, slog.Int64("userId", c.Sender().ID))
		return c.Send("–£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
	}

	if data == nil {
		var partnerID int64
		if c.Data() != "" {
			parsedID, err := strconv.ParseInt(c.Data(), 10, 64)
			if err == nil {
				partnerID = parsedID
			}
		}

		data = &models.User{
			ID:        c.Sender().ID,
			Username:  c.Sender().Username,
			Firstname: c.Sender().FirstName,
			Lastname:  c.Sender().LastName,
			PartnerID: partnerID,
			IsAdmin:   false,
			IsSign:    false,
		}

		err = b.us.Add(data)
		if err != nil {
			b.log.Error("Failed to create new user", err, slog.Int64("userId", c.Sender().ID))
			return c.Send("–£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
		}
	}

	if data.IsSign {
		if isActive, err := b.ss.IsActive(c.Sender().ID, true); err == nil && isActive {
			return c.Send(fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!", c.Sender().FirstName), b.clientButtonsWithSub.AddBtns())
		}
		return c.Send(fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!", c.Sender().FirstName), b.clientButtons.AddBtns())
	}

	acceptOfferButtons := services.NewButtons(models.AcceptOfferButton, []int{1}, "inline")
	b.bot.Handle(acceptOfferButtons.GetBtns()["accept_offer"], b.AcceptOfferHandler)
	return c.Send("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è NSVPN, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø—É–±–ª–∏—á–Ω–æ–π [–æ—Ñ–µ—Ä—Ç—ã](https://teletype.in/@nsvpn/Dpvwcj7llQx).", acceptOfferButtons.AddBtns(), telebot.ModeMarkdown)
}

func (b *Base) HelpHandler(c telebot.Context) error {
	return c.Send("üöÄ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n/help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n")
}

func (b *Base) OnTextHandler(c telebot.Context) error {
	if isActive, err := b.ss.IsActive(c.Sender().ID, true); err == nil && isActive {
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", b.clientButtonsWithSub.AddBtns())
	}
	return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", b.clientButtons.AddBtns())
}

func (b *Base) ProfileHandler(c telebot.Context) error {
	sub, err := b.ss.GetLastByUserID(c.Sender().ID, true)
	if err != nil {
		return err
	}

	subMsg := "üéüÔ∏è *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏*: –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚ùå"
	if sub != nil && sub.EndDate.After(time.Now().UTC()) && sub.IsActive {
		subMsg = "üéüÔ∏è *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏*: –∞–∫—Ç–∏–≤–Ω–æ ‚úÖ\nüìÖ *–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è*: " + sub.EndDate.Format("02-01-2006 15:04:05")
	}

	user, err := b.us.Get(c.Sender().ID)
	if err != nil {
		return err
	}

	btns := services.NewButtons([]models.ButtonOption{{Value: "top_balance", Display: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"}}, []int{1}, "inline")
	for _, btn := range btns.GetBtns() {
		b.bot.Handle(btn, func(c telebot.Context) error {
			u, err := uuid.NewUUID()
			if err != nil {
				return c.Send("–£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
			}

			return b.ph.ChooseCurrencyHandler(c, 0, u.String())
		})
	}

	reffers := 0
	return c.Send(
		fmt.Sprintf("üìù *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*:\n\nüôéüèª *–ò–º—è:* %s\nüÜî *ID:* %d\n\nüí∞ *–ë–∞–ª–∞–Ω—Å*: %d‚ÇΩ\nü§ù *–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*: %d —á–µ–ª.\n\n%s", c.Sender().FirstName, c.Sender().ID, user.Balance, reffers, subMsg),
		&telebot.SendOptions{
			ReplyMarkup: btns.AddBtns(),
			ParseMode:   telebot.ModeMarkdown,
		},
	)
}
